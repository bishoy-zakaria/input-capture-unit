
ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000083c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000083c  000008d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800078  00800078  000008e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000918  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000160b  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a05  00000000  00000000  000020ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c3e  00000000  00000000  00002b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e4  00000000  00000000  00003744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065b  00000000  00000000  00003b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bdd  00000000  00000000  00004183  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00004d60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 b8 03 	jmp	0x770	; 0x770 <__vector_9>
  28:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__vector_10>
  2c:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 39       	cpi	r26, 0x95	; 149
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a5 02 	call	0x54a	; 0x54a <main>
  8a:	0c 94 1c 04 	jmp	0x838	; 0x838 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinDir>:

		break;

	case DIO_PORTD :

		PORTD = Val;
  92:	44 23       	and	r20, r20
  94:	b9 f1       	breq	.+110    	; 0x104 <DIO_SetPinDir+0x72>
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	09 f0       	breq	.+2      	; 0x9c <DIO_SetPinDir+0xa>
  9a:	6b c0       	rjmp	.+214    	; 0x172 <DIO_SetPinDir+0xe0>
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	89 f0       	breq	.+34     	; 0xc2 <DIO_SetPinDir+0x30>
  a0:	28 f0       	brcs	.+10     	; 0xac <DIO_SetPinDir+0x1a>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	c9 f0       	breq	.+50     	; 0xd8 <DIO_SetPinDir+0x46>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	11 f1       	breq	.+68     	; 0xee <DIO_SetPinDir+0x5c>
  aa:	08 95       	ret
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPinDir+0x26>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPinDir+0x22>
  bc:	82 2b       	or	r24, r18
  be:	8a bb       	out	0x1a, r24	; 26
  c0:	08 95       	ret
  c2:	27 b3       	in	r18, 0x17	; 23
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_SetPinDir+0x3c>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_SetPinDir+0x38>
  d2:	82 2b       	or	r24, r18
  d4:	87 bb       	out	0x17, r24	; 23
  d6:	08 95       	ret
  d8:	24 b3       	in	r18, 0x14	; 20
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SetPinDir+0x52>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_SetPinDir+0x4e>
  e8:	82 2b       	or	r24, r18
  ea:	84 bb       	out	0x14, r24	; 20
  ec:	08 95       	ret
  ee:	21 b3       	in	r18, 0x11	; 17
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_SetPinDir+0x68>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_SetPinDir+0x64>
  fe:	82 2b       	or	r24, r18
 100:	81 bb       	out	0x11, r24	; 17
 102:	08 95       	ret
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	91 f0       	breq	.+36     	; 0x12c <DIO_SetPinDir+0x9a>
 108:	28 f0       	brcs	.+10     	; 0x114 <DIO_SetPinDir+0x82>
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	d9 f0       	breq	.+54     	; 0x144 <DIO_SetPinDir+0xb2>
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	29 f1       	breq	.+74     	; 0x15c <DIO_SetPinDir+0xca>
 112:	08 95       	ret
 114:	2a b3       	in	r18, 0x1a	; 26
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_SetPinDir+0x8e>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_SetPinDir+0x8a>
 124:	80 95       	com	r24
 126:	82 23       	and	r24, r18
 128:	8a bb       	out	0x1a, r24	; 26
 12a:	08 95       	ret
 12c:	27 b3       	in	r18, 0x17	; 23
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_SetPinDir+0xa6>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_SetPinDir+0xa2>
 13c:	80 95       	com	r24
 13e:	82 23       	and	r24, r18
 140:	87 bb       	out	0x17, r24	; 23
 142:	08 95       	ret
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_SetPinDir+0xbe>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_SetPinDir+0xba>
 154:	80 95       	com	r24
 156:	82 23       	and	r24, r18
 158:	84 bb       	out	0x14, r24	; 20
 15a:	08 95       	ret
 15c:	21 b3       	in	r18, 0x11	; 17
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_SetPinDir+0xd6>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_SetPinDir+0xd2>
 16c:	80 95       	com	r24
 16e:	82 23       	and	r24, r18
 170:	81 bb       	out	0x11, r24	; 17
 172:	08 95       	ret

00000174 <DIO_WritePin>:



void DIO_WritePin(uint8 Port ,uint8 Pin, uint8 Val)
{
	switch (Val)
 174:	44 23       	and	r20, r20
 176:	b9 f1       	breq	.+110    	; 0x1e6 <DIO_WritePin+0x72>
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	09 f0       	breq	.+2      	; 0x17e <DIO_WritePin+0xa>
 17c:	6b c0       	rjmp	.+214    	; 0x254 <DIO_WritePin+0xe0>


	case DIO_PIN_HIGH :


		switch (Port)
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	89 f0       	breq	.+34     	; 0x1a4 <DIO_WritePin+0x30>
 182:	28 f0       	brcs	.+10     	; 0x18e <DIO_WritePin+0x1a>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	c9 f0       	breq	.+50     	; 0x1ba <DIO_WritePin+0x46>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	11 f1       	breq	.+68     	; 0x1d0 <DIO_WritePin+0x5c>
 18c:	08 95       	ret
		{
		case DIO_PORTA :

			SET_BIT(PORTA,Pin);
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_WritePin+0x26>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_WritePin+0x22>
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27

			break;
 1a2:	08 95       	ret

		case DIO_PORTB :

			SET_BIT(PORTB,Pin);
 1a4:	28 b3       	in	r18, 0x18	; 24
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_WritePin+0x3c>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_WritePin+0x38>
 1b4:	82 2b       	or	r24, r18
 1b6:	88 bb       	out	0x18, r24	; 24

			break;
 1b8:	08 95       	ret

		case DIO_PORTC :

			SET_BIT(PORTC,Pin);
 1ba:	25 b3       	in	r18, 0x15	; 21
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_WritePin+0x52>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_WritePin+0x4e>
 1ca:	82 2b       	or	r24, r18
 1cc:	85 bb       	out	0x15, r24	; 21

			break;
 1ce:	08 95       	ret

		case DIO_PORTD :

			SET_BIT(PORTD,Pin);
 1d0:	22 b3       	in	r18, 0x12	; 18
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_WritePin+0x68>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_WritePin+0x64>
 1e0:	82 2b       	or	r24, r18
 1e2:	82 bb       	out	0x12, r24	; 18

			break;
 1e4:	08 95       	ret
		break;

		case DIO_PIN_LOW :


			switch (Port)
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	91 f0       	breq	.+36     	; 0x20e <DIO_WritePin+0x9a>
 1ea:	28 f0       	brcs	.+10     	; 0x1f6 <DIO_WritePin+0x82>
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	d9 f0       	breq	.+54     	; 0x226 <DIO_WritePin+0xb2>
 1f0:	83 30       	cpi	r24, 0x03	; 3
 1f2:	29 f1       	breq	.+74     	; 0x23e <DIO_WritePin+0xca>
 1f4:	08 95       	ret
			{
			case DIO_PORTA :

				CLR_BIT(PORTA,Pin);
 1f6:	2b b3       	in	r18, 0x1b	; 27
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_WritePin+0x8e>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_WritePin+0x8a>
 206:	80 95       	com	r24
 208:	82 23       	and	r24, r18
 20a:	8b bb       	out	0x1b, r24	; 27

				break;
 20c:	08 95       	ret

			case DIO_PORTB :

				CLR_BIT(PORTB,Pin);
 20e:	28 b3       	in	r18, 0x18	; 24
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_WritePin+0xa6>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_WritePin+0xa2>
 21e:	80 95       	com	r24
 220:	82 23       	and	r24, r18
 222:	88 bb       	out	0x18, r24	; 24

				break;
 224:	08 95       	ret

			case DIO_PORTC :

				CLR_BIT(PORTC,Pin);
 226:	25 b3       	in	r18, 0x15	; 21
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_WritePin+0xbe>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_WritePin+0xba>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	85 bb       	out	0x15, r24	; 21

				break;
 23c:	08 95       	ret

			case DIO_PORTD :

				CLR_BIT(PORTD,Pin);
 23e:	22 b3       	in	r18, 0x12	; 18
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_WritePin+0xd6>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_WritePin+0xd2>
 24e:	80 95       	com	r24
 250:	82 23       	and	r24, r18
 252:	82 bb       	out	0x12, r24	; 18
 254:	08 95       	ret

00000256 <LCD_WriteCommand>:
#endif
	
}

void LCD_WriteCommand(uint8 cmd)
{
 256:	cf 93       	push	r28
 258:	c8 2f       	mov	r28, r24
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_RS_PIN, DIO_PIN_LOW);
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_RW_PIN, DIO_PIN_LOW);
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	62 e0       	ldi	r22, 0x02	; 2
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	63 e0       	ldi	r22, 0x03	; 3
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
	
	PORTA = (cmd & 0xF0) | (PORTA & 0x0F);
 278:	8b b3       	in	r24, 0x1b	; 27
 27a:	9c 2f       	mov	r25, r28
 27c:	90 7f       	andi	r25, 0xF0	; 240
 27e:	8f 70       	andi	r24, 0x0F	; 15
 280:	89 2b       	or	r24, r25
 282:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_HIGH);
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	63 e0       	ldi	r22, 0x03	; 3
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	8f e9       	ldi	r24, 0x9F	; 159
 290:	9f e0       	ldi	r25, 0x0F	; 15
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_WriteCommand+0x3c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_WriteCommand+0x42>
 298:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	63 e0       	ldi	r22, 0x03	; 3
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
	
	PORTA = (cmd << 4) | (PORTA & 0x0F);
 2a4:	2b b3       	in	r18, 0x1b	; 27
 2a6:	30 e1       	ldi	r19, 0x10	; 16
 2a8:	c3 9f       	mul	r28, r19
 2aa:	c0 01       	movw	r24, r0
 2ac:	11 24       	eor	r1, r1
 2ae:	92 2f       	mov	r25, r18
 2b0:	9f 70       	andi	r25, 0x0F	; 15
 2b2:	89 2b       	or	r24, r25
 2b4:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_HIGH);
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	63 e0       	ldi	r22, 0x03	; 3
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
 2c0:	8f e9       	ldi	r24, 0x9F	; 159
 2c2:	9f e0       	ldi	r25, 0x0F	; 15
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_WriteCommand+0x6e>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_WriteCommand+0x74>
 2ca:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	63 e0       	ldi	r22, 0x03	; 3
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
 2d6:	8f e1       	ldi	r24, 0x1F	; 31
 2d8:	9e e4       	ldi	r25, 0x4E	; 78
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_WriteCommand+0x84>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_WriteCommand+0x8a>
 2e0:	00 00       	nop
	
	_delay_ms(5);
	
}
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <LCD_Init>:
	
	_delay_ms(5);
	
	#elif LCD_MODE == 4
	
		DIO_SetPinDir(LCD_4BIT_CMD_PORT ,LCD_RS_PIN , DIO_PIN_OUTPUT);
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_CMD_PORT ,LCD_RW_PIN , DIO_PIN_OUTPUT);
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	62 e0       	ldi	r22, 0x02	; 2
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_CMD_PORT ,LCD_E_PIN , DIO_PIN_OUTPUT);
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
		
		DIO_SetPinDir(LCD_4BIT_DATA_PORT ,LCD_D4 , DIO_PIN_OUTPUT);
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	64 e0       	ldi	r22, 0x04	; 4
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_DATA_PORT ,LCD_D5 , DIO_PIN_OUTPUT);
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	65 e0       	ldi	r22, 0x05	; 5
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_DATA_PORT ,LCD_D6 , DIO_PIN_OUTPUT);
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	66 e0       	ldi	r22, 0x06	; 6
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_DATA_PORT ,LCD_D7 , DIO_PIN_OUTPUT);
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	67 e0       	ldi	r22, 0x07	; 7
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 32c:	2f ef       	ldi	r18, 0xFF	; 255
 32e:	81 ee       	ldi	r24, 0xE1	; 225
 330:	94 e0       	ldi	r25, 0x04	; 4
 332:	21 50       	subi	r18, 0x01	; 1
 334:	80 40       	sbci	r24, 0x00	; 0
 336:	90 40       	sbci	r25, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <LCD_Init+0x4c>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <LCD_Init+0x56>
 33c:	00 00       	nop
		
		_delay_ms(100);
		
		LCD_WriteCommand(0x33);
 33e:	83 e3       	ldi	r24, 0x33	; 51
 340:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
		LCD_WriteCommand(0x32);
 344:	82 e3       	ldi	r24, 0x32	; 50
 346:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
		LCD_WriteCommand(0x28);
 34a:	88 e2       	ldi	r24, 0x28	; 40
 34c:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
		LCD_WriteCommand(0x0C);
 350:	8c e0       	ldi	r24, 0x0C	; 12
 352:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
        LCD_WriteCommand(0x01);
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
		LCD_WriteCommand(0x06);
 35c:	86 e0       	ldi	r24, 0x06	; 6
 35e:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
		LCD_WriteCommand(0x02);
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
 368:	08 95       	ret

0000036a <LCD_WriteChar>:
	
}


void LCD_WriteChar(uint8 data)
{
 36a:	cf 93       	push	r28
 36c:	c8 2f       	mov	r28, r24
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_RS_PIN, DIO_PIN_HIGH);
 36e:	41 e0       	ldi	r20, 0x01	; 1
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_RW_PIN, DIO_PIN_LOW);
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	62 e0       	ldi	r22, 0x02	; 2
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 382:	40 e0       	ldi	r20, 0x00	; 0
 384:	63 e0       	ldi	r22, 0x03	; 3
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
	
	PORTA = (data & 0xF0) ;
 38c:	8c 2f       	mov	r24, r28
 38e:	80 7f       	andi	r24, 0xF0	; 240
 390:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_HIGH);
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	63 e0       	ldi	r22, 0x03	; 3
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
 39c:	8f e9       	ldi	r24, 0x9F	; 159
 39e:	9f e0       	ldi	r25, 0x0F	; 15
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <LCD_WriteChar+0x36>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <LCD_WriteChar+0x3c>
 3a6:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	63 e0       	ldi	r22, 0x03	; 3
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
	
	PORTA = (data << 4) ;
 3b2:	c2 95       	swap	r28
 3b4:	c0 7f       	andi	r28, 0xF0	; 240
 3b6:	cb bb       	out	0x1b, r28	; 27
	
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_HIGH);
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	63 e0       	ldi	r22, 0x03	; 3
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
 3c2:	8f e9       	ldi	r24, 0x9F	; 159
 3c4:	9f e0       	ldi	r25, 0x0F	; 15
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <LCD_WriteChar+0x5c>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <LCD_WriteChar+0x62>
 3cc:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	63 e0       	ldi	r22, 0x03	; 3
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_WritePin>
 3d8:	8f e1       	ldi	r24, 0x1F	; 31
 3da:	9e e4       	ldi	r25, 0x4E	; 78
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <LCD_WriteChar+0x72>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <LCD_WriteChar+0x78>
 3e2:	00 00       	nop
	
	_delay_ms(5);
}
 3e4:	cf 91       	pop	r28
 3e6:	08 95       	ret

000003e8 <LCD_WriteString>:

void LCD_WriteString(uint8* str)
{
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	fc 01       	movw	r30, r24
	uint8 i = 0;
	
	while(str[i] != '\0')
 3f0:	80 81       	ld	r24, Z
 3f2:	88 23       	and	r24, r24
 3f4:	59 f0       	breq	.+22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3f6:	8f 01       	movw	r16, r30
 3f8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_WriteChar(str[i]);
 3fa:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_WriteChar>
		i++;
 3fe:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_WriteString(uint8* str)
{
	uint8 i = 0;
	
	while(str[i] != '\0')
 400:	f8 01       	movw	r30, r16
 402:	ec 0f       	add	r30, r28
 404:	f1 1d       	adc	r31, r1
 406:	80 81       	ld	r24, Z
 408:	81 11       	cpse	r24, r1
 40a:	f7 cf       	rjmp	.-18     	; 0x3fa <LCD_WriteString+0x12>
	{
		LCD_WriteChar(str[i]);
		i++;
	}
}
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	0f 91       	pop	r16
 412:	08 95       	ret

00000414 <LCD_GoTo>:

void LCD_GoTo(uint8 row, uint8 col)
{
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	00 d0       	rcall	.+0      	; 0x41a <LCD_GoTo+0x6>
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
	uint8 pos[2] = {0x80 , 0xC0};
 41e:	90 e8       	ldi	r25, 0x80	; 128
 420:	99 83       	std	Y+1, r25	; 0x01
 422:	90 ec       	ldi	r25, 0xC0	; 192
 424:	9a 83       	std	Y+2, r25	; 0x02
		
	LCD_WriteCommand(pos[row]+col);
 426:	fe 01       	movw	r30, r28
 428:	e8 0f       	add	r30, r24
 42a:	f1 1d       	adc	r31, r1
 42c:	81 81       	ldd	r24, Z+1	; 0x01
 42e:	86 0f       	add	r24, r22
 430:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
		
}
 434:	0f 90       	pop	r0
 436:	0f 90       	pop	r0
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <LCD_Clear>:
void LCD_Clear(void)
{
	LCD_WriteCommand(0x01);
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_WriteCommand>
 444:	08 95       	ret

00000446 <LCD_WriteInteger>:
}

void LCD_WriteInteger(uint32 int_num)
{
 446:	8f 92       	push	r8
 448:	9f 92       	push	r9
 44a:	af 92       	push	r10
 44c:	bf 92       	push	r11
 44e:	cf 92       	push	r12
 450:	df 92       	push	r13
 452:	ef 92       	push	r14
 454:	ff 92       	push	r15
 456:	0f 93       	push	r16
 458:	1f 93       	push	r17
 45a:	8b 01       	movw	r16, r22
 45c:	9c 01       	movw	r18, r24
	uint32 temp =1;
	while (int_num)
 45e:	67 2b       	or	r22, r23
 460:	68 2b       	or	r22, r24
 462:	69 2b       	or	r22, r25
 464:	09 f4       	brne	.+2      	; 0x468 <LCD_WriteInteger+0x22>
 466:	53 c0       	rjmp	.+166    	; 0x50e <LCD_WriteInteger+0xc8>
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	90 e0       	ldi	r25, 0x00	; 0
	{
		temp=(temp*10)+(int_num %10);
 470:	0f 2e       	mov	r0, r31
 472:	fa e0       	ldi	r31, 0x0A	; 10
 474:	8f 2e       	mov	r8, r31
 476:	91 2c       	mov	r9, r1
 478:	a1 2c       	mov	r10, r1
 47a:	b1 2c       	mov	r11, r1
 47c:	f0 2d       	mov	r31, r0
 47e:	dc 01       	movw	r26, r24
 480:	cb 01       	movw	r24, r22
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	aa 1f       	adc	r26, r26
 488:	bb 1f       	adc	r27, r27
 48a:	6c 01       	movw	r12, r24
 48c:	7d 01       	movw	r14, r26
 48e:	cc 0c       	add	r12, r12
 490:	dd 1c       	adc	r13, r13
 492:	ee 1c       	adc	r14, r14
 494:	ff 1c       	adc	r15, r15
 496:	cc 0c       	add	r12, r12
 498:	dd 1c       	adc	r13, r13
 49a:	ee 1c       	adc	r14, r14
 49c:	ff 1c       	adc	r15, r15
 49e:	c8 0e       	add	r12, r24
 4a0:	d9 1e       	adc	r13, r25
 4a2:	ea 1e       	adc	r14, r26
 4a4:	fb 1e       	adc	r15, r27
 4a6:	c9 01       	movw	r24, r18
 4a8:	b8 01       	movw	r22, r16
 4aa:	a5 01       	movw	r20, r10
 4ac:	94 01       	movw	r18, r8
 4ae:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__udivmodsi4>
 4b2:	6c 0d       	add	r22, r12
 4b4:	7d 1d       	adc	r23, r13
 4b6:	8e 1d       	adc	r24, r14
 4b8:	9f 1d       	adc	r25, r15
		int_num/=10;
 4ba:	02 2f       	mov	r16, r18
 4bc:	13 2f       	mov	r17, r19
 4be:	24 2f       	mov	r18, r20
 4c0:	35 2f       	mov	r19, r21
}

void LCD_WriteInteger(uint32 int_num)
{
	uint32 temp =1;
	while (int_num)
 4c2:	01 15       	cp	r16, r1
 4c4:	11 05       	cpc	r17, r1
 4c6:	21 05       	cpc	r18, r1
 4c8:	31 05       	cpc	r19, r1
 4ca:	c9 f6       	brne	.-78     	; 0x47e <LCD_WriteInteger+0x38>
	{
		temp=(temp*10)+(int_num %10);
		int_num/=10;
	}
	while(temp>1)
 4cc:	62 30       	cpi	r22, 0x02	; 2
 4ce:	71 05       	cpc	r23, r1
 4d0:	81 05       	cpc	r24, r1
 4d2:	91 05       	cpc	r25, r1
 4d4:	e0 f0       	brcs	.+56     	; 0x50e <LCD_WriteInteger+0xc8>
	{
		LCD_WriteChar((temp%10)+48);
 4d6:	0f 2e       	mov	r0, r31
 4d8:	fa e0       	ldi	r31, 0x0A	; 10
 4da:	8f 2e       	mov	r8, r31
 4dc:	91 2c       	mov	r9, r1
 4de:	a1 2c       	mov	r10, r1
 4e0:	b1 2c       	mov	r11, r1
 4e2:	f0 2d       	mov	r31, r0
 4e4:	a5 01       	movw	r20, r10
 4e6:	94 01       	movw	r18, r8
 4e8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__udivmodsi4>
 4ec:	e2 2e       	mov	r14, r18
 4ee:	f3 2e       	mov	r15, r19
 4f0:	04 2f       	mov	r16, r20
 4f2:	15 2f       	mov	r17, r21
 4f4:	80 e3       	ldi	r24, 0x30	; 48
 4f6:	86 0f       	add	r24, r22
 4f8:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_WriteChar>
		temp/=10;
 4fc:	6e 2d       	mov	r22, r14
 4fe:	7f 2d       	mov	r23, r15
 500:	80 2f       	mov	r24, r16
 502:	91 2f       	mov	r25, r17
	while (int_num)
	{
		temp=(temp*10)+(int_num %10);
		int_num/=10;
	}
	while(temp>1)
 504:	62 30       	cpi	r22, 0x02	; 2
 506:	71 05       	cpc	r23, r1
 508:	81 05       	cpc	r24, r1
 50a:	91 05       	cpc	r25, r1
 50c:	58 f7       	brcc	.-42     	; 0x4e4 <LCD_WriteInteger+0x9e>
	{
		LCD_WriteChar((temp%10)+48);
		temp/=10;
	}
 50e:	1f 91       	pop	r17
 510:	0f 91       	pop	r16
 512:	ff 90       	pop	r15
 514:	ef 90       	pop	r14
 516:	df 90       	pop	r13
 518:	cf 90       	pop	r12
 51a:	bf 90       	pop	r11
 51c:	af 90       	pop	r10
 51e:	9f 90       	pop	r9
 520:	8f 90       	pop	r8
 522:	08 95       	ret

00000524 <PWM2_Init>:
}

void PWM2_Generate(uint32 duty_cycle)
{
	
	OCR2 = ((duty_cycle * 256 ) /100 ) ;
 524:	8f 9a       	sbi	0x11, 7	; 17
 526:	85 b5       	in	r24, 0x25	; 37
 528:	8a 66       	ori	r24, 0x6A	; 106
 52a:	85 bd       	out	0x25, r24	; 37
 52c:	08 95       	ret

0000052e <ICU_Init>:
	
}

void ICU_Init (void)
{
	SET_BIT(DDRB , 7);
 52e:	bf 9a       	sbi	0x17, 7	; 23
	CLR_BIT(DDRD, 6);
 530:	8e 98       	cbi	0x11, 6	; 17
	
	ICR1 = 0x0000;
 532:	17 bc       	out	0x27, r1	; 39
 534:	16 bc       	out	0x26, r1	; 38
	TCCR1B |= 0x41 ;
 536:	8e b5       	in	r24, 0x2e	; 46
 538:	81 64       	ori	r24, 0x41	; 65
 53a:	8e bd       	out	0x2e, r24	; 46
	
	TIMSK |= 0X24;
 53c:	89 b7       	in	r24, 0x39	; 57
 53e:	84 62       	ori	r24, 0x24	; 36
 540:	89 bf       	out	0x39, r24	; 57
	SREG |= 0x80;
 542:	8f b7       	in	r24, 0x3f	; 63
 544:	80 68       	ori	r24, 0x80	; 128
 546:	8f bf       	out	0x3f, r24	; 63
 548:	08 95       	ret

0000054a <main>:
	uint32 TON=0;
	uint32 TOTAL=0;
	uint32 Duty_Cycle=0;
	uint32 Frequency=0;

	PWM2_Init();
 54a:	0e 94 92 02 	call	0x524	; 0x524 <PWM2_Init>
}

void PWM2_Generate(uint32 duty_cycle)
{
	
	OCR2 = ((duty_cycle * 256 ) /100 ) ;
 54e:	89 e9       	ldi	r24, 0x99	; 153
 550:	83 bd       	out	0x23, r24	; 35
	uint32 Frequency=0;

	PWM2_Init();
	PWM2_Generate(60);

	ICU_Init();
 552:	0e 94 97 02 	call	0x52e	; 0x52e <ICU_Init>
	
	LCD_Init();
 556:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD_Init>
			
			LCD_WriteString("DUTY CYCLE:");
			LCD_WriteInteger(Duty_Cycle);
			LCD_GoTo(1, 0);
			LCD_WriteString("Frequency:");
			LCD_WriteInteger(Frequency);
 55a:	0f 2e       	mov	r0, r31
 55c:	81 2c       	mov	r8, r1
 55e:	f4 e2       	ldi	r31, 0x24	; 36
 560:	9f 2e       	mov	r9, r31
 562:	f4 ef       	ldi	r31, 0xF4	; 244
 564:	af 2e       	mov	r10, r31
 566:	b1 2c       	mov	r11, r1
 568:	f0 2d       	mov	r31, r0
	ICU_Init();
	
	LCD_Init();
    while (1) 
    {
		if(ICU_Counter==3)
 56a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <ICU_Counter>
 56e:	83 30       	cpi	r24, 0x03	; 3
 570:	f1 f7       	brne	.-4      	; 0x56e <main+0x24>
		{
			TON=C2-C1;
 572:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <C1>
 576:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <C1+0x1>
 57a:	a0 91 82 00 	lds	r26, 0x0082	; 0x800082 <C1+0x2>
 57e:	b0 91 83 00 	lds	r27, 0x0083	; 0x800083 <C1+0x3>
			TOTAL=C3-C1;
 582:	c0 90 78 00 	lds	r12, 0x0078	; 0x800078 <__data_end>
 586:	d0 90 79 00 	lds	r13, 0x0079	; 0x800079 <__data_end+0x1>
 58a:	e0 90 7a 00 	lds	r14, 0x007A	; 0x80007a <__data_end+0x2>
 58e:	f0 90 7b 00 	lds	r15, 0x007B	; 0x80007b <__data_end+0x3>
 592:	c8 1a       	sub	r12, r24
 594:	d9 0a       	sbc	r13, r25
 596:	ea 0a       	sbc	r14, r26
 598:	fb 0a       	sbc	r15, r27
			Duty_Cycle=(TON*100)/TOTAL;
 59a:	40 91 7c 00 	lds	r20, 0x007C	; 0x80007c <C2>
 59e:	50 91 7d 00 	lds	r21, 0x007D	; 0x80007d <C2+0x1>
 5a2:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <C2+0x2>
 5a6:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <C2+0x3>
 5aa:	9a 01       	movw	r18, r20
 5ac:	ab 01       	movw	r20, r22
 5ae:	28 1b       	sub	r18, r24
 5b0:	39 0b       	sbc	r19, r25
 5b2:	4a 0b       	sbc	r20, r26
 5b4:	5b 0b       	sbc	r21, r27
 5b6:	a4 e6       	ldi	r26, 0x64	; 100
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	0e 94 11 04 	call	0x822	; 0x822 <__muluhisi3>
 5be:	a7 01       	movw	r20, r14
 5c0:	96 01       	movw	r18, r12
 5c2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__udivmodsi4>
 5c6:	29 01       	movw	r4, r18
 5c8:	3a 01       	movw	r6, r20
			Frequency=16000000 /(1 * TOTAL);
			
			LCD_WriteString("DUTY CYCLE:");
 5ca:	80 e6       	ldi	r24, 0x60	; 96
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_WriteString>
			LCD_WriteInteger(Duty_Cycle);
 5d2:	c3 01       	movw	r24, r6
 5d4:	b2 01       	movw	r22, r4
 5d6:	0e 94 23 02 	call	0x446	; 0x446 <LCD_WriteInteger>
			LCD_GoTo(1, 0);
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_GoTo>
			LCD_WriteString("Frequency:");
 5e2:	8c e6       	ldi	r24, 0x6C	; 108
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_WriteString>
			LCD_WriteInteger(Frequency);
 5ea:	c5 01       	movw	r24, r10
 5ec:	b4 01       	movw	r22, r8
 5ee:	a7 01       	movw	r20, r14
 5f0:	96 01       	movw	r18, r12
 5f2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__udivmodsi4>
 5f6:	ca 01       	movw	r24, r20
 5f8:	b9 01       	movw	r22, r18
 5fa:	0e 94 23 02 	call	0x446	; 0x446 <LCD_WriteInteger>
 5fe:	2f ef       	ldi	r18, 0xFF	; 255
 600:	84 e3       	ldi	r24, 0x34	; 52
 602:	9c e0       	ldi	r25, 0x0C	; 12
 604:	21 50       	subi	r18, 0x01	; 1
 606:	80 40       	sbci	r24, 0x00	; 0
 608:	90 40       	sbci	r25, 0x00	; 0
 60a:	e1 f7       	brne	.-8      	; 0x604 <main+0xba>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <main+0xc4>
 60e:	00 00       	nop
			_delay_ms(250);
			LCD_Clear();
 610:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_Clear>
			SET_BIT(TIMSK,5);
 614:	89 b7       	in	r24, 0x39	; 57
 616:	80 62       	ori	r24, 0x20	; 32
 618:	89 bf       	out	0x39, r24	; 57
 61a:	a7 cf       	rjmp	.-178    	; 0x56a <main+0x20>

0000061c <__vector_11>:
}

/* *************************************************************************** ISR0 ************************************************************************ */

ISR (TIMER0_OVF_vect)
{
 61c:	1f 92       	push	r1
 61e:	0f 92       	push	r0
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	0f 92       	push	r0
 624:	11 24       	eor	r1, r1
 626:	2f 93       	push	r18
 628:	3f 93       	push	r19
 62a:	4f 93       	push	r20
 62c:	5f 93       	push	r21
 62e:	6f 93       	push	r22
 630:	7f 93       	push	r23
 632:	8f 93       	push	r24
 634:	9f 93       	push	r25
 636:	af 93       	push	r26
 638:	bf 93       	push	r27
 63a:	ef 93       	push	r30
 63c:	ff 93       	push	r31
	count0++;
 63e:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <count0>
 642:	8f 5f       	subi	r24, 0xFF	; 255
 644:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <count0>
	while (count0 == Timer0_over_flow)
 648:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <count0>
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	a0 e0       	ldi	r26, 0x00	; 0
 650:	b0 e0       	ldi	r27, 0x00	; 0
 652:	40 91 91 00 	lds	r20, 0x0091	; 0x800091 <Timer0_over_flow>
 656:	50 91 92 00 	lds	r21, 0x0092	; 0x800092 <Timer0_over_flow+0x1>
 65a:	60 91 93 00 	lds	r22, 0x0093	; 0x800093 <Timer0_over_flow+0x2>
 65e:	70 91 94 00 	lds	r23, 0x0094	; 0x800094 <Timer0_over_flow+0x3>
 662:	84 17       	cp	r24, r20
 664:	95 07       	cpc	r25, r21
 666:	a6 07       	cpc	r26, r22
 668:	b7 07       	cpc	r27, r23
 66a:	e1 f4       	brne	.+56     	; 0x6a4 <__vector_11+0x88>
	{
		(*Timer0_Ptr)();
 66c:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <Timer0_Ptr>
 670:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <Timer0_Ptr+0x1>
 674:	09 95       	icall
		TCNT0 = init_value;
 676:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <init_value>
 67a:	82 bf       	out	0x32, r24	; 50
		count0=0;
 67c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <count0>
/* *************************************************************************** ISR0 ************************************************************************ */

ISR (TIMER0_OVF_vect)
{
	count0++;
	while (count0 == Timer0_over_flow)
 680:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <count0>
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	a0 e0       	ldi	r26, 0x00	; 0
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	40 91 91 00 	lds	r20, 0x0091	; 0x800091 <Timer0_over_flow>
 68e:	50 91 92 00 	lds	r21, 0x0092	; 0x800092 <Timer0_over_flow+0x1>
 692:	60 91 93 00 	lds	r22, 0x0093	; 0x800093 <Timer0_over_flow+0x2>
 696:	70 91 94 00 	lds	r23, 0x0094	; 0x800094 <Timer0_over_flow+0x3>
 69a:	84 17       	cp	r24, r20
 69c:	95 07       	cpc	r25, r21
 69e:	a6 07       	cpc	r26, r22
 6a0:	b7 07       	cpc	r27, r23
 6a2:	21 f3       	breq	.-56     	; 0x66c <__vector_11+0x50>
	{
		(*Timer0_Ptr)();
		TCNT0 = init_value;
		count0=0;
	}
}
 6a4:	ff 91       	pop	r31
 6a6:	ef 91       	pop	r30
 6a8:	bf 91       	pop	r27
 6aa:	af 91       	pop	r26
 6ac:	9f 91       	pop	r25
 6ae:	8f 91       	pop	r24
 6b0:	7f 91       	pop	r23
 6b2:	6f 91       	pop	r22
 6b4:	5f 91       	pop	r21
 6b6:	4f 91       	pop	r20
 6b8:	3f 91       	pop	r19
 6ba:	2f 91       	pop	r18
 6bc:	0f 90       	pop	r0
 6be:	0f be       	out	0x3f, r0	; 63
 6c0:	0f 90       	pop	r0
 6c2:	1f 90       	pop	r1
 6c4:	18 95       	reti

000006c6 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 6c6:	1f 92       	push	r1
 6c8:	0f 92       	push	r0
 6ca:	0f b6       	in	r0, 0x3f	; 63
 6cc:	0f 92       	push	r0
 6ce:	11 24       	eor	r1, r1
 6d0:	2f 93       	push	r18
 6d2:	3f 93       	push	r19
 6d4:	4f 93       	push	r20
 6d6:	5f 93       	push	r21
 6d8:	6f 93       	push	r22
 6da:	7f 93       	push	r23
 6dc:	8f 93       	push	r24
 6de:	9f 93       	push	r25
 6e0:	af 93       	push	r26
 6e2:	bf 93       	push	r27
 6e4:	ef 93       	push	r30
 6e6:	ff 93       	push	r31
	count0++;
 6e8:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <count0>
 6ec:	8f 5f       	subi	r24, 0xFF	; 255
 6ee:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <count0>
	while (count0 == Timer0_Compare_Match)
 6f2:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <count0>
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	a0 e0       	ldi	r26, 0x00	; 0
 6fa:	b0 e0       	ldi	r27, 0x00	; 0
 6fc:	40 91 8c 00 	lds	r20, 0x008C	; 0x80008c <Timer0_Compare_Match>
 700:	50 91 8d 00 	lds	r21, 0x008D	; 0x80008d <Timer0_Compare_Match+0x1>
 704:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <Timer0_Compare_Match+0x2>
 708:	70 91 8f 00 	lds	r23, 0x008F	; 0x80008f <Timer0_Compare_Match+0x3>
 70c:	84 17       	cp	r24, r20
 70e:	95 07       	cpc	r25, r21
 710:	a6 07       	cpc	r26, r22
 712:	b7 07       	cpc	r27, r23
 714:	e1 f4       	brne	.+56     	; 0x74e <__vector_10+0x88>
	{
		(*Timer0_Ptr)();
 716:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <Timer0_Ptr>
 71a:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <Timer0_Ptr+0x1>
 71e:	09 95       	icall
		OCR0 = init_value;
 720:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <init_value>
 724:	8c bf       	out	0x3c, r24	; 60
		count0=0;
 726:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <count0>
}

ISR(TIMER0_COMP_vect)
{
	count0++;
	while (count0 == Timer0_Compare_Match)
 72a:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <count0>
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	a0 e0       	ldi	r26, 0x00	; 0
 732:	b0 e0       	ldi	r27, 0x00	; 0
 734:	40 91 8c 00 	lds	r20, 0x008C	; 0x80008c <Timer0_Compare_Match>
 738:	50 91 8d 00 	lds	r21, 0x008D	; 0x80008d <Timer0_Compare_Match+0x1>
 73c:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <Timer0_Compare_Match+0x2>
 740:	70 91 8f 00 	lds	r23, 0x008F	; 0x80008f <Timer0_Compare_Match+0x3>
 744:	84 17       	cp	r24, r20
 746:	95 07       	cpc	r25, r21
 748:	a6 07       	cpc	r26, r22
 74a:	b7 07       	cpc	r27, r23
 74c:	21 f3       	breq	.-56     	; 0x716 <__vector_10+0x50>
		(*Timer0_Ptr)();
		OCR0 = init_value;
		count0=0;
	}
	
}
 74e:	ff 91       	pop	r31
 750:	ef 91       	pop	r30
 752:	bf 91       	pop	r27
 754:	af 91       	pop	r26
 756:	9f 91       	pop	r25
 758:	8f 91       	pop	r24
 75a:	7f 91       	pop	r23
 75c:	6f 91       	pop	r22
 75e:	5f 91       	pop	r21
 760:	4f 91       	pop	r20
 762:	3f 91       	pop	r19
 764:	2f 91       	pop	r18
 766:	0f 90       	pop	r0
 768:	0f be       	out	0x3f, r0	; 63
 76a:	0f 90       	pop	r0
 76c:	1f 90       	pop	r1
 76e:	18 95       	reti

00000770 <__vector_9>:
		CLR_BIT(TIMSK,5);
	}
}*/

ISR(TIMER1_OVF_vect)
{
 770:	1f 92       	push	r1
 772:	0f 92       	push	r0
 774:	0f b6       	in	r0, 0x3f	; 63
 776:	0f 92       	push	r0
 778:	11 24       	eor	r1, r1
 77a:	8f 93       	push	r24
 77c:	9f 93       	push	r25
 77e:	af 93       	push	r26
 780:	bf 93       	push	r27
	DDRB=0b00000001;
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	87 bb       	out	0x17, r24	; 23
	PORTB=0b00000001;
 786:	88 bb       	out	0x18, r24	; 24
	Timer1_over_flow++;
 788:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <Timer1_over_flow>
 78c:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <Timer1_over_flow+0x1>
 790:	a0 91 87 00 	lds	r26, 0x0087	; 0x800087 <Timer1_over_flow+0x2>
 794:	b0 91 88 00 	lds	r27, 0x0088	; 0x800088 <Timer1_over_flow+0x3>
 798:	01 96       	adiw	r24, 0x01	; 1
 79a:	a1 1d       	adc	r26, r1
 79c:	b1 1d       	adc	r27, r1
 79e:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <Timer1_over_flow>
 7a2:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <Timer1_over_flow+0x1>
 7a6:	a0 93 87 00 	sts	0x0087, r26	; 0x800087 <Timer1_over_flow+0x2>
 7aa:	b0 93 88 00 	sts	0x0088, r27	; 0x800088 <Timer1_over_flow+0x3>
 7ae:	bf 91       	pop	r27
 7b0:	af 91       	pop	r26
 7b2:	9f 91       	pop	r25
 7b4:	8f 91       	pop	r24
 7b6:	0f 90       	pop	r0
 7b8:	0f be       	out	0x3f, r0	; 63
 7ba:	0f 90       	pop	r0
 7bc:	1f 90       	pop	r1
 7be:	18 95       	reti

000007c0 <__udivmodsi4>:
 7c0:	a1 e2       	ldi	r26, 0x21	; 33
 7c2:	1a 2e       	mov	r1, r26
 7c4:	aa 1b       	sub	r26, r26
 7c6:	bb 1b       	sub	r27, r27
 7c8:	fd 01       	movw	r30, r26
 7ca:	0d c0       	rjmp	.+26     	; 0x7e6 <__udivmodsi4_ep>

000007cc <__udivmodsi4_loop>:
 7cc:	aa 1f       	adc	r26, r26
 7ce:	bb 1f       	adc	r27, r27
 7d0:	ee 1f       	adc	r30, r30
 7d2:	ff 1f       	adc	r31, r31
 7d4:	a2 17       	cp	r26, r18
 7d6:	b3 07       	cpc	r27, r19
 7d8:	e4 07       	cpc	r30, r20
 7da:	f5 07       	cpc	r31, r21
 7dc:	20 f0       	brcs	.+8      	; 0x7e6 <__udivmodsi4_ep>
 7de:	a2 1b       	sub	r26, r18
 7e0:	b3 0b       	sbc	r27, r19
 7e2:	e4 0b       	sbc	r30, r20
 7e4:	f5 0b       	sbc	r31, r21

000007e6 <__udivmodsi4_ep>:
 7e6:	66 1f       	adc	r22, r22
 7e8:	77 1f       	adc	r23, r23
 7ea:	88 1f       	adc	r24, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	1a 94       	dec	r1
 7f0:	69 f7       	brne	.-38     	; 0x7cc <__udivmodsi4_loop>
 7f2:	60 95       	com	r22
 7f4:	70 95       	com	r23
 7f6:	80 95       	com	r24
 7f8:	90 95       	com	r25
 7fa:	9b 01       	movw	r18, r22
 7fc:	ac 01       	movw	r20, r24
 7fe:	bd 01       	movw	r22, r26
 800:	cf 01       	movw	r24, r30
 802:	08 95       	ret

00000804 <__umulhisi3>:
 804:	a2 9f       	mul	r26, r18
 806:	b0 01       	movw	r22, r0
 808:	b3 9f       	mul	r27, r19
 80a:	c0 01       	movw	r24, r0
 80c:	a3 9f       	mul	r26, r19
 80e:	70 0d       	add	r23, r0
 810:	81 1d       	adc	r24, r1
 812:	11 24       	eor	r1, r1
 814:	91 1d       	adc	r25, r1
 816:	b2 9f       	mul	r27, r18
 818:	70 0d       	add	r23, r0
 81a:	81 1d       	adc	r24, r1
 81c:	11 24       	eor	r1, r1
 81e:	91 1d       	adc	r25, r1
 820:	08 95       	ret

00000822 <__muluhisi3>:
 822:	0e 94 02 04 	call	0x804	; 0x804 <__umulhisi3>
 826:	a5 9f       	mul	r26, r21
 828:	90 0d       	add	r25, r0
 82a:	b4 9f       	mul	r27, r20
 82c:	90 0d       	add	r25, r0
 82e:	a4 9f       	mul	r26, r20
 830:	80 0d       	add	r24, r0
 832:	91 1d       	adc	r25, r1
 834:	11 24       	eor	r1, r1
 836:	08 95       	ret

00000838 <_exit>:
 838:	f8 94       	cli

0000083a <__stop_program>:
 83a:	ff cf       	rjmp	.-2      	; 0x83a <__stop_program>
